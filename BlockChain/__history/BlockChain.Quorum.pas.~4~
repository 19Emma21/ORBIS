unit BlockChain.Quorum;

interface
uses
  System.Classes,
  System.IOUtils,
  System.SysUtils,
  System.Hash,
  System.DateUtils,
  App.Types,
  Wallet.Types,
  BlockChain.BaseBlock,
  BlockChain.BaseChain,
  BlockChain.Types,
  BlockChain.FileHandler,
  Crypto.RSA;

const
  LastVersionQuorum = 0;

type
  TQuorumInfoV0 = packed record
    RequestID: uint64;
    VoterID: uint64;
    class operator Implicit(Buf: TVoteRequestInfoV0): TBytes;
    class operator Implicit(Buf: TBytes): TVoteRequestInfoV0;
    class operator Add(buf1: TBytes; buf2: TVoteRequestInfoV0): TBytes;
    class operator Add(buf2: TVoteRequestInfoV0; buf1: TBytes): TBytes;
    function GetSize: uint64;
  end;

  TVoteRequestTrxV0 = packed record // 192
    VoteRequestInfo: TVoteRequestInfoV0; // 128
    OwnerSign: TSignedHash; // 64
    function GetSize: uint64;
    class operator Implicit(Buf: TVoteRequestTrxV0): TBytes;
    class operator Implicit(Buf: TBytes): TVoteRequestTrxV0;
    class operator Add(buf1: TBytes; buf2: TVoteRequestTrxV0): TBytes;
    class operator Add(buf2: TVoteRequestTrxV0; buf1: TBytes): TBytes;
    procedure SignTrx(Wallet: TWallet);
  end;

  TVoteRequestBlockV0 = class(TBaseBlock)
  protected
    VoteRequestInfo: TVoteRequestTrxV0;
  public
    class function GenerateInitBlock: TBytes; static;
    function GetSizeBlock: uint64; override;
    function GetTrxData: TBytes;
    function GetData: TBytes; override;
    function GetDataWithoutHeader: TBytes; override;
    procedure SetData(const AData: TBytes); override;
    constructor Create(AVoteRequestInfo: TVoteRequestTrxV0; LastBlockHash: THash); overload;
    constructor Create; overload;
  end;

  TVoteRequestChain = class(TBaseChain)
  public
    function GetBlock(Ind: uint64): TBaseBlock; override;
    procedure AddToFastIndex(AData: TBytes); override;
  end;
implementation

end.
