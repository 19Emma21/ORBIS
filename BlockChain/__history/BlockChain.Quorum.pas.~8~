unit BlockChain.Quorum;

interface
uses
  System.Classes,
  System.IOUtils,
  System.SysUtils,
  System.Hash,
  System.DateUtils,
  App.Types,
  Wallet.Types,
  BlockChain.BaseBlock,
  BlockChain.BaseChain,
  BlockChain.Types,
  BlockChain.FileHandler,
  Crypto.RSA;

const
  LastVersionQuorum = 0;

type
  TQuorumInfoV0 = packed record
    RequestID: uint64;
    VoterID: uint64;
    class operator Implicit(Buf: TQuorumInfoV0): TBytes;
    class operator Implicit(Buf: TBytes): TQuorumInfoV0;
    class operator Add(buf1: TBytes; buf2: TQuorumInfoV0): TBytes;
    class operator Add(buf2: TQuorumInfoV0; buf1: TBytes): TBytes;
    function GetSize: uint64;
  end;

  TQuorumTrxV0 = packed record // 192
    VoteRequestInfo: TQuorumInfoV0; // 128
    OwnerSign: TSignedHash; // 64
    function GetSize: uint64;
    class operator Implicit(Buf: TQuorumTrxV0): TBytes;
    class operator Implicit(Buf: TBytes): TQuorumTrxV0;
    class operator Add(buf1: TBytes; buf2: TQuorumTrxV0): TBytes;
    class operator Add(buf2: TQuorumTrxV0; buf1: TBytes): TBytes;
    procedure SignTrx(Wallet: TWallet);
  end;

  TQuorumBlockV0 = class(TBaseBlock)
  protected
    QuorumInfo: TQuorumTrxV0;
  public
    class function GenerateInitBlock: TBytes; static;
    function GetSizeBlock: uint64; override;
    function GetTrxData: TBytes;
    function GetData: TBytes; override;
    function GetDataWithoutHeader: TBytes; override;
    procedure SetData(const AData: TBytes); override;
    constructor Create(AQuorumTrx: TQuorumTrxV0; LastBlockHash: THash); overload;
    constructor Create; overload;
  end;

  TQuorumChain = class(TBaseChain)
  public
    function GetBlock(Ind: uint64): TBaseBlock; override;
    procedure AddToFastIndex(AData: TBytes); override;
  end;
implementation


{$REGION 'T—ommissionInfoV0'}

class operator TQuorumInfoV0.Add(buf1: TBytes; buf2: TQuorumInfoV0): TBytes;
var
  LData, RData: TBytes;
begin
  RData := buf1;
  SetLength(LData, SizeOf(TQuorumInfoV0));
  Move(buf2, LData[0], SizeOf(TQuorumInfoV0));
  RData := RData + LData;
  Result := RData;
end;

class operator TQuorumInfoV0.Add(buf2: TQuorumInfoV0; buf1: TBytes): TBytes;
var
  LData, RData: TBytes;
begin
  RData := buf1;
  SetLength(LData, SizeOf(TQuorumInfoV0));
  Move(buf2, LData[0], SizeOf(TQuorumInfoV0));
  RData := LData + RData;
  Result := RData;
end;

function TQuorumInfoV0.GetSize: uint64;
begin
  Result := SizeOf(self);
end;

class operator TQuorumInfoV0.Implicit(Buf: TQuorumInfoV0): TBytes;
begin
  SetLength(Result, SizeOf(TQuorumInfoV0));
  Move(Buf, Result[0], SizeOf(TQuorumInfoV0));
end;

class operator TQuorumInfoV0.Implicit(Buf: TBytes): TQuorumInfoV0;
begin
  Move(Buf[0], Result, SizeOf(TQuorumInfoV0));
end;
{$ENDREGION}
{$REGION 'T—ommissionBlockV0'}

constructor TQuorumBlockV0.Create;
begin
  //
end;

constructor TQuorumBlockV0.Create(AQuorumTrx: TQuorumTrxV0; LastBlockHash: THash);
var
  Buf: TMemoryStream;
  data: TBytes;
begin
  Header.VersionData := 0;
  Header.TypeBlock := Byte(Quorum);
  Header.UnixTime := DateTimeToUnix(now, False);
  QuorumInfo := AQuorumTrx;
end;

class function TQuorumBlockV0.GenerateInitBlock: TBytes;
var
  LocalHeader: THeader;
  Local—ommission: TQuorumTrxV0;
  LocalIDSigned: uint64;
  LocalSign: TSignedHash;
  counter: uint64;
begin
  LocalHeader := Default (THeader);
  LocalHeader.TypeBlock := Byte(Quorum);
  Local—ommission := Default (TQuorumTrxV0);
  Result := LocalHeader + Local—ommission;
end;

function TQuorumBlockV0.GetData: TBytes;
begin
  Result := Header + QuorumInfo;
end;

function TQuorumBlockV0.GetDataWithoutHeader: TBytes;
begin
  Result := QuorumInfo;
end;

function TQuorumBlockV0.GetSizeBlock: uint64;
begin
  Result := Header.GetSize + QuorumInfo.GetSize;
end;

function TQuorumBlockV0.GetTrxData: TBytes;
begin
  Result := QuorumInfo;
end;

procedure TQuorumBlockV0.SetData(const AData: TBytes);
var
  counter: uint64;
begin
  counter := 0;
  Move(AData[counter], Header, SizeOf(THeader));
  inc(counter, SizeOf(THeader));
  QuorumInfo := Copy(AData, counter, QuorumInfo.GetSize);
end;

{$ENDREGION}
{$REGION 'T—ommissionChain'}

procedure TQuorumChain.AddToFastIndex(AData: TBytes);
begin
  inherited;

end;

function TQuorumChain.GetBlock(Ind: uint64): TBaseBlock;
var
  Header: THeader;
  data: TBytes;
var
  QuorumBlockV0: TQuorumBlockV0;
begin
  ChainFile.TryRead(Ind, data);
  Move(data[0], Header, SizeOf(THeader));
  case Header.VersionData of
    0:
      begin
        QuorumBlockV0 := TQuorumBlockV0.Create;
        QuorumBlockV0.SetData(data);
        Result := QuorumBlockV0;
      end;
  else
    Result := nil;
  end;
end;

{$ENDREGION}
{$REGION 'TQuorumTrxV0'}

class operator TQuorumTrxV0.Add(buf1: TBytes; buf2: TQuorumTrxV0): TBytes;
var
  LData, RData: TBytes;
begin
  RData := buf1;
  SetLength(LData, SizeOf(TQuorumTrxV0));
  Move(buf2, LData[0], SizeOf(TQuorumTrxV0));
  RData := RData + LData;
  Result := RData;
end;

class operator TQuorumTrxV0.Add(buf2: TQuorumTrxV0; buf1: TBytes): TBytes;
var
  LData, RData: TBytes;
begin
  RData := buf1;
  SetLength(LData, SizeOf(TQuorumTrxV0));
  Move(buf2, LData[0], SizeOf(TQuorumTrxV0));
  RData := LData + RData;
  Result := RData;
end;

function TQuorumTrxV0.GetSize: uint64;
begin
  Result := SizeOf(self);
end;

class operator TQuorumTrxV0.Implicit(Buf: TQuorumTrxV0): TBytes;
begin
  SetLength(Result, SizeOf(Buf));
  Move(Buf, Result[0], SizeOf(Buf));
end;

class operator TQuorumTrxV0.Implicit(Buf: TBytes): TQuorumTrxV0;
begin
  Move(Buf[0], Result, SizeOf(Result));
end;

procedure TQuorumTrxV0.SignTrx(Wallet: TWallet);
var
  Buf: TMemoryStream;
  Bytes: TBytes;
begin
  Buf := TMemoryStream.Create;
  Buf.Write(QuorumInfo, QuorumInfo.GetSize);
  SetLength(Bytes, SizeOf(THash));
  Buf.Position := 0;
  Move(THashSHA2.GetHashBytes(Buf)[0], Bytes[0], SizeOf(THash));
  Buf.Destroy;
  OwnerSign := RSAEncrypt(Wallet.PrivKey, Bytes);
end;

{$ENDREGION}


end.
