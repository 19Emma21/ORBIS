unit WebServer.HTTPConnectedClient;

interface

uses
  System.Types,
  System.SysUtils,
  Net.ConnectedClient;

type
  THTTPConnectedClient = class(TConnectedClient)
    procedure CallBack(const ASyncResult: IAsyncResult);
  private
    FHandle: TProc<THTTPConnectedClient, TBytes>;
    procedure StartReceive; override;

  public
    procedure SendMessage(const AData: TBytes); override;
    property Handle: TProc<THTTPConnectedClient, TBytes> read FHandle write FHandle;
    destructor Destroy; override;
  end;

implementation

{ THTTPConnectedClient }

procedure THTTPConnectedClient.CallBack(const ASyncResult: IAsyncResult);
var
  Bytes: TBytes;
begin
  try
    Bytes := Socket.EndReceiveBytes(ASyncResult);
  except
    SetLength(Bytes, 0);
  end;

  if Length(Bytes) > 0
  then
  begin
    Handle(Self, Bytes);
    StartReceive;
  end
  else
    Self.Free;
end;

destructor THTTPConnectedClient.Destroy;
begin

  inherited;
end;

procedure THTTPConnectedClient.StartReceive;
begin
  Socket.BeginReceive(CallBack);
end;

procedure THTTPConnectedClient.SendMessage(const AData: TBytes);
begin
  Socket.Send(AData);
end;

end.
