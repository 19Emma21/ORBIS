unit from;

interface

uses
  System.SysUtils,
  System.Types,
  System.UITypes,
  System.Classes,
  System.Variants,
  System.IOUtils,
  System.Generics.Collections,
  App.Paths,
  App.Types,
  BlockChain.Core,
  FMX.Types,
  FMX.Controls,
  FMX.Forms,
  FMX.Graphics,
  FMX.Dialogs, System.Rtti,
  FMX.Grid.Style,
  FMX.Controls.Presentation,
  FMX.ScrollBox,
  FMX.Grid,
  FMX.Objects,
  FMX.Menus, FMX.ListBox, FMX.StdCtrls;

type
  TCurrnetPaths = class(TInterfacedObject, IBasePaths)
  public
    RootPath: string;
    function GetPathBlockChain: string;
    function GetPathLog: string;
    function GetPathCryptoContainer: string;
    procedure SetRootPath(APath:string);
    function QueryInterface(const IID: TGUID; out Obj): HResult; stdcall;
    function _AddRef: Integer; stdcall;
    function _Release: Integer; stdcall;
  end;

  TForm1 = class(TForm)
    Rectangle1: TRectangle;
    Rectangle2: TRectangle;
    Rectangle3: TRectangle;
    MainMenu1: TMainMenu;
    MenuItem1: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    OpenDialog1: TOpenDialog;
    Label1: TLabel;
    ComboBox1: TComboBox;
    StringGrid1: TStringGrid;
    Button1: TButton;
    Button2: TButton;
    procedure MenuItem3Click(Sender: TObject);
    procedure ComboBox1Change(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    bc: TBlockChainCore;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.fmx}

procedure TForm1.Button1Click(Sender: TObject);
begin
  bc.Inquiries.CreateTestTrx(ComboBox1.ItemIndex);
  ComboBox1Change(self);
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  DataSource: TArray<TArray<TPair<string, string>>>;
begin
//  showmessage(combobox1.Items[combobox1.ItemIndex]);
  DataSource := bc.Inquiries.GetDataFromChain(combobox1.ItemIndex);

  stringgrid1.ClearColumns;
  for var i:integer := 0 to Length(DataSource[0]) - 1 do
    stringgrid1.AddObject(TColumn.Create(stringgrid1));
  for var i:integer := 0 to Length(DataSource[0]) - 1 do
    stringgrid1.Columns[i].Header := DataSource[0][i].Key;

  for var i: integer := 0 to Length(DataSource) - 1 do
  begin
    for var j: integer := 0 to Length(DataSource[i]) - 1 do
    begin
      stringgrid1.Cells[j,i] := DataSource[i][j].Value;
    end;
  end;

end;

procedure TForm1.ComboBox1Change(Sender: TObject);
var
  DataSource: TArray<TArray<TPair<string, string>>>;
begin
//  showmessage(combobox1.Items[combobox1.ItemIndex]);
  DataSource := bc.Inquiries.GetDataFromChain(combobox1.ItemIndex);

  stringgrid1.ClearColumns;
  for var i:integer := 0 to Length(DataSource[0]) - 1 do
    stringgrid1.AddObject(TColumn.Create(stringgrid1));
  for var i:integer := 0 to Length(DataSource[0]) - 1 do
    stringgrid1.Columns[i].Header := DataSource[0][i].Key;

  for var i: integer := 0 to Length(DataSource) - 1 do
  begin
    for var j: integer := 0 to Length(DataSource[i]) - 1 do
    begin
      stringgrid1.Cells[j,i] := DataSource[i][j].Value;
    end;
  end;

end;

procedure TForm1.MenuItem3Click(Sender: TObject);
var
  lpaths: TCurrnetPaths;
  Chains: TArray<string>;
begin
  OpenDialog1.Execute;
  lpaths := TCurrnetPaths.Create;
  lpaths.SetRootPath(System.IOUtils.TPath.GetDirectoryName(OpenDialog1.FileName));
  Paths := lpaths;
  bc := TBlockChainCore.Create;
  ComboBox1.Items.AddStrings(bc.Inquiries.GetChains);
  ComboBox1.ItemIndex := 0;
end;

{ TCurrnetPaths }

function TCurrnetPaths.GetPathBlockChain: string;
begin
  Result := System.IOUtils.TPath.Combine(RootPath, '.lab-blockchain');
end;

function TCurrnetPaths.GetPathCryptoContainer: string;
begin
  Result := System.IOUtils.TPath.Combine(RootPath, '.lab-cryptocontainer');
end;

function TCurrnetPaths.GetPathLog: string;
begin
  Result := System.IOUtils.TPath.Combine(RootPath, '.lab-log');
end;

function TCurrnetPaths.QueryInterface(const IID: TGUID; out Obj): HResult;
begin

end;

procedure TCurrnetPaths.SetRootPath(APath:string);
begin
  RootPath := APath;
end;

function TCurrnetPaths._AddRef: Integer;
begin

end;

function TCurrnetPaths._Release: Integer;
begin

end;

end.
